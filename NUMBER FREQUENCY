//------BRUTE FORCE APPROACH----------------------------------

// Time complexity --0(QXN) where Q is the unique numbers and N is the size of array
/*{
i/p: 
arr[]={2,1,2,1,3,4}
1 appers 2 times
2 appears 2 times
3 appears 1 time
4 appears 1 time
13 appears 0 times.....
}*/

class Sol{
    int CountFrequency(int num,int arr[]){
        int cnt=0;
        for(int i=0;i<arr.length;i++){
            if(num==arr[i]){
                cnt+=1;
            }
        }
        return cnt;
    }
}
public class Main {
    public static void main(String[] args) {
        Sol s=new Sol();
        int arr[]={2,1,2,1,3};
        int num=1300;
     int res=   s.CountFrequency(num,arr);
        System.out.println(num+" "+"appears"+" "+res+" "+"times");
    }
}



//----------HASHING APPROACH---------------------------------------
/*{TIME COMPLEXITY

| Range of Numbers                    | Recommended Approach               |
| ----------------------------------- | ---------------------------------- |
| 0 ≤ arr[i] ≤ 10⁵                    | Use `int[] hsh` ✅                  |
| 0 ≤ arr[i] ≤ 10⁷                    | Still okay ✅                       |
| arr[i] large (like 10⁹) or negative | Use `HashMap<Integer, Integer>` ⚙️ |

}*/
class Main {
    public static void main(String[] args) {
        int arr[] = {2, 1, 2, 1, 3};
        int hsh[] = new int[4]; // size based on your original code

        // Count frequency of each element
        for (int i = 0; i < arr.length; i++) {
            hsh[arr[i]] += 1;
        }

        // Print in format: i appears _ times
        for (int i = 0; i < hsh.length; i++) {
            System.out.println(i + " appears " + hsh[i] + " times");
        }
    }
}

================================================================================================================================

///-----------CHARACTER FREQUENCY 



//==== BRUTE FORCE
TIME COMPLEXITY:so o(qXN) if q=26 then 26XN
{
STRING S="ababcdseb"
a appers 2 times
b appears 2 times
.................
}
class Sol {
    int charFreq(char ch, String str) {
        int cnt = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == ch) { 
                cnt++;
            }
        }
        return cnt;
    }
}

public class Main {
    public static void main(String[] args) {
        Sol sObj = new Sol();
        String str = "abcacbbbaa"; 
        char ch = 'z';
        int res = sObj.charFreq(ch, str);
        System.out.println(ch+" "+"repeats"+" "+" "+res+"times");
    }
}


//HASHING FOR FINDING THE FREQUENCY IN CHARACTERS-----------------
class Main {
    public static void main(String[] args) {
        String str = "abcbcacab";
        char ch = 'a';

        // Frequency array for 26 lowercase letters
        int[] hsh = new int[26]; //[256]

        // Count frequency of each character
        for (int i = 0; i < str.length(); i++) {
            hsh[str.charAt(i) - 'a']++;// hsh[str.charAt(i)]++;
        }

        // Print frequency of the chosen character
        System.out.println(ch + " appears " + hsh[ch - 'a'] + " times");//hsh[ch ]
    }
}

