//Finding the missing element in the 1-9 using sum approac
/*{
TC:o(N^2)
SC:o(1)
}*/


public class MissingElement {
    public static void main(String[] args) {
        int[][] arr = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 9, 0}
        };

        int n = 9; // total elements expected (1 to 9)
        int expectedSum = n * (n + 1) / 2;
        int actualSum = 0;

        // Using normal nested for loops
        for (int i = 0; i < arr.length; i++) {          // outer loop → rows
            for (int j = 0; j < arr[i].length; j++) {   // inner loop → columns
                actualSum += arr[i][j];
            }
        }

        int missing = expectedSum - actualSum;
        System.out.println("Missing element: " + missing);
    }
}


----------------------------------------------------------------------------------------


//Finding the Repeating Element in a 2D Array

/*{
TC:o(N^2)
SC:o(N^2)--worst case :all unique elements stored in hashset
}*/

import java.util.HashSet;

public class RepeatingElement {
    public static void main(String[] args) {
        int[][] arr = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 5}
        };

        HashSet<Integer> seen = new HashSet<>();

        // Loop over rows
        for (int i = 0; i < arr.length; i++) {
            // Loop over columns in current row
            for (int j = 0; j < arr[i].length; j++) {
                int val = arr[i][j];

                // If val is already in the set, it's repeating
                if (!seen.add(val)) {
                    System.out.println("Repeating element: " + val);
                }
            }
        }
    }
}

